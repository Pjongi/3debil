=============================================
  Dokumentacja Silnika 3D ebil (Format TXT)
              Wersja: 1.2.7
         Data: RRRR-MM-DD (Wstaw aktualną datę)
=============================================

--------------------
1. WPROWADZENIE
--------------------

Niniejszy dokument opisuje strukturę i działanie silnika 3D ebil
w wersji 1.2.7. Silnik został stworzony przy użyciu biblioteki
LWJGL 3 (Lightweight Java Game Library) oraz JOML (Java OpenGL Math Library).
Stanowi on elastyczną podstawę do tworzenia gier i aplikacji 3D.
Kluczową cechą architektury jest oddzielenie rdzenia silnika od logiki
konkretnej gry/aplikacji poprzez interfejs IEngineLogic.

Celem tej wersji silnika jest dostarczenie podstawowych mechanizmów renderowania,
zarządzania aplikacją, obsługi audio, ładowania zasobów, zarządzania
materiałami, obsługi wielu źródeł światła (w tym cieni kierunkowych),
interakcji z obiektami opartej na raycastingu oraz prostego menu pauzy
renderowanego za pomocą biblioteki Nuklear.

---------------------------
2. GŁÓWNE FUNKCJE SILNIKA (v1.2.7)
---------------------------

  - Zarządzanie Oknem: Tworzenie i zarządzanie oknem aplikacji (GLFW).
  - Kontekst OpenGL: Inicjalizacja i zarządzanie kontekstem graficznym OpenGL (Core Profile 3.3+).
  - Pętla Gry: Implementacja pętli gry (input, update, render) delegująca do `IEngineLogic`.
  - Obsługa Wejścia: Śledzenie stanu klawiatury i myszy (`Input.java`).
      - Dynamiczne przełączanie aktywnych callbacków GLFW między systemem inputu gry a GUI.
      - Zarządzanie trybem kursora (widoczny/ukryty, zablokowany/odblokowany) w zależności od stanu pauzy.
  - System Czasu: Mierzenie czasu między klatkami (`deltaTime`).
  - Kamera 3D: Kamera typu FPS (`Camera`) z możliwością generowania promienia patrzenia.
  - System Audio: Zarządzanie OpenAL (`AudioManager`), ładowanie WAV (`WavLoader`), źródła (`SoundSource`), słuchacz (`Listener`).
  - Obsługa Tekstur: Ładowanie obrazów (STB) jako tekstur OpenGL (`Texture`).
  - System Materiałów: Definiowanie właściwości powierzchni (`Material`) z kolorami i mapami tekstur.
  - Ładowanie Modeli: Ładowanie geometrii z plików (Assimp) (`ModelLoader`).
  - Obiekty Gry: `GameObject` (Mesh, Material, Transform, Properties), `GameObjectProperties` (Builder).
      - `GameObject` posiada metodę `intersectsRay()` dla detekcji trafienia promieniem.
      - `GameObjectProperties` zawiera flagę `canBeTargeted` i logikę niszczenia.
  - Interakcja Raycasting: Możliwość uszkadzania obiektów, na które patrzy gracz.
  - Renderowanie Grafiki: (Stan z zrefaktoryzowanym systemem renderowania w `org.example.graphics.render`)
      - `Renderer` (główny orkiestrator w `org.example.graphics.render`).
      - `ShaderManager` (zarządzanie shaderami GLSL).
      - `ShadowRenderer` (mapa cieni dla światła kierunkowego).
      - `SceneRenderer` (główny przebieg renderowania sceny).
      - `DefaultResourceManager` (domyślna tekstura i materiał).
  - Obsługa Wielu Świateł:
      - Światło kierunkowe (`DirectionalLight`) z obsługą cieni.
      - Światła punktowe (`PointLight`) z tłumieniem (`Attenuation`).
      - Światła reflektorowe (`SpotLight`) z tłumieniem i stożkiem.
  - Interfejs Użytkownika (GUI):
      - Integracja z biblioteką **Nuklear** (`NuklearGui.java` w pakiecie `org.example.ui`).
      - **Menu Pauzy:** Aktywowane klawiszem `ESC`, renderowane przez Nuklear. Pozwala na wznowienie gry lub jej zamknięcie.
  - Ładowanie Zasobów: `ResourceLoader` (z classpath).
  - Obsługa Błędów: Wyjątki `ResourceNotFoundException`, `ResourceLoadException`.
  - Narzędzia: `MeshLoader`, `WavLoader`.

-------------------------------
3. WYMAGANIA I KONFIGURACJA
-------------------------------
  *(Bez zmian w stosunku do v1.2.6, ale upewnij się, że zależności Nuklear są w pom.xml)*
  - Java Development Kit (JDK): Wersja 11 lub nowsza (zalecana 17+).
  - Maven: System budowania projektu.
  - System Operacyjny: Windows, Linux lub macOS.

Projekt używa `pom.xml` z zależnościami: LWJGL (Core, GLFW, OpenGL, OpenAL, STB, Assimp, **Nuklear**), JOML.

-----------------------------
4. STRUKTURA PROJEKTU (v1.2.7)
-----------------------------

  org.example
    |-- Main.java

  org.example.core
    |-- Engine.java
    |-- Window.java
    |-- Input.java
    |-- Timer.java

  org.example.audio
    |-- ... (bez zmian)

  org.example.exception
    |-- ... (bez zmian)

  org.example.graphics
    |-- Camera.java
    |-- Material.java
    |-- Mesh.java
    |-- ShaderProgram.java
    |-- Texture.java
    |-- light/
    `-- shadow/ShadowMap.java (dla cieni kierunkowych)
       `-- (SpotLightShadowMap.java - jeśli wróciłeś do tego)

  org.example.graphics.render  (Zrefaktoryzowany system renderowania)
    |-- Renderer.java
    |-- ShaderManager.java
    |-- ShadowRenderer.java (dla cieni kierunkowych)
    |-- SceneRenderer.java
    |-- DefaultResourceManager.java
    `-- (SpotLightShadowRenderer.java - jeśli wróciłeś do tego)

  org.example.scene
    |-- ... (bez zmian)

  org.example.util
    |-- ... (bez zmian)

  org.example.ui              (NOWY PAKIET)
    `-- NuklearGui.java       (Zarządzanie Nuklear GUI)

  org.example.game
    |-- IEngineLogic.java     (Sygnatury metod init/render używają `org.example.graphics.render.Renderer`)
    `-- DemoGame.java         (Używa `org.example.graphics.render.Renderer`)

  src/main/resources/
    |-- fonts/                (NOWY KATALOG, np. FiraSans.ttf)
    |-- audio/
    |-- models/
    |-- shaders/              (shadery sceny, głębi, a także dla Nukleara)
    `-- textures/

  versions
    `-- legacy/

-----------------------
5. OMÓWIENIE KODU (v1.2.7)
-----------------------

  Szczegółowe omówienie zmian:

  5.1. Rdzeń Silnika (org.example.core)
    - `Engine.java`:
        - Inicjalizuje i zarządza obiektem `NuklearGui`.
        - Metoda `setPaused()` dynamicznie przełącza aktywne callbacki GLFW między `Input.java` (dla gry) a `NuklearGui.java` (dla menu). Kontroluje również tryb kursora myszy.
        - Główna pętla (`loop()`) została zmodyfikowana, aby poprawnie integrować cykl życia Nukleara (`beginInput`, `endInput`, `renderGUI`) z logiką gry. `glfwPollEvents()` jest teraz wywoływane centralnie w `Engine.loop()`.
        - Metoda `buildPauseMenuAndHandleActions()` definiuje układ i logikę prostego menu pauzy (przyciski "Resume", "Exit") używając Nukleara.
    - `Input.java`:
        - Dodano metody `setActiveCallbacks()` i `clearCallbacks()` do zarządzania rejestracją/wyrejestrowaniem swoich callbacków GLFW.
        - Metoda `init()` nie ustawia już callbacków automatycznie.
    - `Window.java`:
        - Metoda `update()` została uproszczona do samego `glfwSwapBuffers()`, ponieważ `glfwPollEvents()` jest teraz w `Engine.loop()`.

  5.2. Interfejs Użytkownika (org.example.ui)
    - `NuklearGui.java`:
        - Nowa klasa odpowiedzialna za całą logikę związaną z biblioteką Nuklear.
        - Inicjalizuje kontekst Nukleara, ładuje czcionkę, konfiguruje shadery i bufory OpenGL specyficzne dla Nukleara.
        - Posiada własny zestaw obiektów callback GLFW (`GLFWKeyCallback`, `GLFWMouseButtonCallback` itp.).
        - Metody `setActiveCallbacks()` i `clearCallbacks()` służą do włączania/wyłączania tych callbacków.
        - Metody `beginInput()` i `endInput()` opakowują `nk_input_begin()` i `nk_input_end()` Nukleara.
        - Metoda `renderGUI()` wykonuje konwersję poleceń Nukleara na operacje rysowania OpenGL i renderuje interfejs.
        - Zarządza czyszczeniem zasobów Nukleara.

-------------------
6. PODSUMOWANIE (v1.2.7)
-------------------

Silnik 3D ebil w wersji 1.2.7 wprowadza podstawowy, ale funkcjonalny system menu pauzy renderowany za pomocą biblioteki Nuklear. Kluczowe zmiany obejmują integrację NuklearGui z główną pętlą silnika oraz implementację dynamicznego przełączania obsługi inputu między grą a interfejsem użytkownika. Gracz może teraz zapauzować grę klawiszem ESC, wejść w interakcję z menu (wznowić lub wyjść) i płynnie powrócić do rozgrywki. Silnik nadal wykorzystuje zrefaktoryzowaną architekturę renderowania (z klasami w `org.example.graphics.render`).

=============================================
  Koniec Dokumentacji
=============================================